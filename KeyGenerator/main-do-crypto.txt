// C Runtime Includes
#include <iostream>
#include <fstream>
#include <sstream>
#include <cstdlib>
#include <string>

// Includes all required Crypto++
// Block Cipher Headers
#include "SymmetricCipher.h"
#include "md5.h"
// AutoSeededRandomPool
#include "osrng.h"

// Crypto++ Includes
#include "modes.h" // xxx_Mode< >
#include "filters.h" // StringSource and
#include "integer.h"
// StreamTransformation

// Cipher Modes
//
// #define CIPHER_MODE CBC_CTS_Mode
#define CIPHER_MODE CBC_Mode
// #define CIPHER_MODE CFB_FIPS_Mode
// #define CIPHER_MODE CFB_Mode
// #define CIPHER_MODE CTR_Mode
// #define CIPHER_MODE ECB_Mode
// #define CIPHER_MODE OFB_Mode

// Ciphers
//
#define CIPHER AES
// #define CIPHER Blowfish
// #define CIPHER BTEA
// #define CIPHER Camellia
// #define CIPHER CAST128
// #define CIPHER CAST256
// #define CIPHER DES
// #define CIPHER DES_EDE2
// #define CIPHER DES_EDE3
// #define CIPHER DES_XEX3
// #define CIPHER GOST
// #define CIPHER IDEA
// #define CIPHER MARS
// #define CIPHER RC2
// #define CIPHER RC5
// #define CIPHER RC6
// #define CIPHER Rijndael
// #define CIPHER SAFER_K
// #define CIPHER SAFER_SK
// #define CIPHER Serpent
// #define CIPHER SHACAL2
// #define CIPHER SHARK
// #define CIPHER SKIPJACK
// #define CIPHER ThreeWay
// #define CIPHER Twofish
// #define CIPHER XTEA

using namespace CryptoPP;
using namespace std;

string int_to_string(int value, int length)
{
	ostringstream ss;
	ss << value;
	string size = ss.str();
	while (size.length() < length)//wyrównanie d³ugoœci do 8
		size = "0" + size;
	return size;
}

void getNextKey(byte *key)
{
	const byte message[] = {*key};
	cout << "!!!!!!!!!" << sizeof(message) << "," << sizeof(*key) << endl;
	for (int i = 0; i < sizeof(message); i++)
		cout << i<<":" << message[i] << endl;
	SHA1 sha; // SHA1, SHA224, SHA256, SHA384, SHA512
	sha.Update(key, 5);
	int odpSize = sha.DigestSize();
	byte *odp = new byte[odpSize];
	sha.Final(odp);
	for (int i = 0; i < sizeof(key); i++)
		key[i] = (int)odp[i];
		//cout << hex <<  (int)odp[i];
	delete[] odp;
	//cout << endl;
}

int main(int argc, char* argv[]) {

	try
	{
		AutoSeededRandomPool prng;
		//number of digits in size string
		int numberOfDigits = 8;

		// Key and IV setup
		byte key[CIPHER::DEFAULT_KEYLENGTH];
		byte iv[CIPHER::BLOCKSIZE];

		/*prng.GenerateBlock(key, sizeof(key) );
		cout << "Key:"<<key << endl;*/

		memset(iv, 0x01, CIPHER::BLOCKSIZE);
		cout << "IV:" << iv << endl;

		// Message M
		string PlainText = "Ala ma kota, a kot ma Alê.";
		string sizeString = int_to_string(PlainText.length(), numberOfDigits);
		cout << "modifies size(string):" << sizeString << endl;

		// Configuration to file
		ofstream file("output.txt");
		file << sizeString;
		file << iv;
		file.close();

		//Configuration from file
		ifstream file2("output.txt");
		string len;
		for (int i = 0; i < numberOfDigits; i++)
			len += file2.get();
		cout << "pobrana dl:" << len << endl;
		istringstream iss(len);
		int dl; iss>>dl;
		cout << "w int: " << dl<<endl;
		string IV;
		for (int i = 0; i < CIPHER::BLOCKSIZE; i++)
			IV.push_back(file2.get());
		cout << "iv:" << IV << endl<<"*****************************"<<endl;
		//bez rozbijania na bloki - sam CBC z AES
		/*
		AutoSeededRandomPool prng;

		SecByteBlock key(AES::DEFAULT_KEYLENGTH);
		prng.GenerateBlock( key, key.size() );
		
		byte iv[ AES::BLOCKSIZE ];
		prng.GenerateBlock( iv, sizeof(iv) );
		
		string plain = "CBC Mode Test";
		string cipher, encoded, recovered;

		try
		{
			cout << "plain text: " << plain << endl;

			CBC_Mode< AES >::Encryption e;
			e.SetKeyWithIV(key, key.size(), iv);

			// The StreamTransformationFilter adds padding
			//  as required. ECB and CBC Mode must be padded
			//  to the block size of the cipher.
			StringSource ss(plain, true,
				new StreamTransformationFilter(e,
				new StringSink(cipher)
				) // StreamTransformationFilter      
				); // StringSource
		}
		catch (const CryptoPP::Exception& e)
		{
			cerr << e.what() << endl;
			exit(1);
		}
		*/

		//cout << endl << endl << "key before (:" << sizeof(key) << ")" << endl << key << endl;

		//cout << endl << endl << "key after (:" << sizeof(key) << ")" << endl << key << endl;

		// Cipher Text
		string CipherText;

		cout << "towrzenie Gi" << endl;
		//G0
		byte* licznik = 0;
		MD5 md5;
		md5.Update(iv, sizeof(iv));
		//md5.Update(licznik, sizeof(licznik));
		md5.Update(key,sizeof(key));
		
		byte* G0; md5.TruncatedFinal(G0,sizeof(CIPHER::BLOCKSIZE));
		//cout << "G0:" << G0 << endl;
		for (int i = 0; i < PlainText.size(); i += CIPHER::BLOCKSIZE)//rozbicie na bloki
		{
			SHA().CalculateDigest(key, key, sizeof(key));//generowanie i=tego klucza

			string BlockText;
			BlockText = PlainText.substr(i, i + CIPHER::BLOCKSIZE);
			while (BlockText.size() < CIPHER::BLOCKSIZE)
				BlockText.push_back('x');
			cout << "blok:" << BlockText << endl;
			// Encryptor
			CIPHER_MODE<CIPHER>::Encryption
				Encryptor(key, sizeof(key), iv);//CBC AES

			// Encryption
			StringSource(BlockText, true,
				new StreamTransformationFilter(Encryptor,
				new StringSink(CipherText)
				) // StreamTransformationFilter
				); // StringSource

			file << CipherText;

			//Gi+1
			MD5 mD5;
			mD5.Update(G0, sizeof(iv));
			mD5.Update(licznik, sizeof(licznik));
			mD5.Update(key, sizeof(key));
			mD5.Final(G0);

		}
		///////////////////////////////////////

		// Recovered Text 
		string RecoveredText;

		// Decryptor
		/*CIPHER_MODE<CIPHER>::Decryption
			Decryptor(key, sizeof(key), iv);

		// Decryption
		StringSource(CipherText, true,
			new StreamTransformationFilter(Decryptor,
			new StringSink(RecoveredText)
			) // StreamTransformationFilter
			); // StringSource

		//////////////////////////////////////////
		// Output //
		//////////////////////////////////////////

		cout << "Algorithm:" << endl;
		cout << " " << Encryptor.AlgorithmName() << endl;
		cout << "Minimum Key Size:" << endl;
		cout << " " << Encryptor.MinKeyLength() << " bytes" << endl;
		cout << endl;

		cout << "Plain Text (" << PlainText.length() << " bytes)" << endl;
		cout << " '" << PlainText << "'" << endl;
		cout << endl;

		cout << "Cipher Text Size:" << endl;
		cout << " " << CipherText.size() << " bytes" << endl;
		cout << endl;

		cout << "Recovered Text:" << endl;
		cout << " '" << RecoveredText << "'" << endl;
		cout << endl;*/
	}
	catch ( Exception& e)
	{
		cerr << e.what() << endl;
	}
	catch (...)
	{
		cerr << "Unknown Error" << endl;
	}

	system("PAUSE");
	return 0;
}
//*/

